[tool.poetry]
name = "app"
version = "1.0.0"
description = "BTS - Betting Software Bet-Maker"
authors = ["Anthony Bagrianov <rudiemeant@gmail.com>"]
maintainers = ["Anthony Bagrianov <rudiemeant@gmail.com>"]

[tool.poetry.dependencies]
python = "^3.12.0"

# Web
fastapi = "0.111.0"
gunicorn = "22.0.0"
orjson = "3.10.1"
pydantic = { version = "2.7.1", extras = ["email"] }
pydantic-settings = "2.2.1"
uvicorn = "0.29.0"
uvloop = { version = "0.19.0", markers = "sys_platform == 'linux' or sys_platform == 'darwin'" }

# Database
alembic = "1.13.1"
asyncpg = "0.29.0"
psycopg2-binary = "2.9.9"
sqlalchemy = { extras = ["asyncio"], version = "2.0.29" }
sqlalchemy-utils = "0.41.2"
sqlmodel = "0.0.18"

# Utils
aiocache = "0.12.2"
aiocsv = "1.3.1"
aiofiles = "23.2.1"
aiohttp = "3.9.5"
arrow = "1.3.0"
croniter = "2.0.5"
jinja2 = "3.1.4"
loguru = "0.7.2"
pyjwt = "2.8.0"
python-jose = { extras = ["cryptography"], version = "3.3.0" }
temporalio = "1.5.1"
ujson = "5.9.0"
msgpack = "1.0.8"
python-multipart = "^0.0.9"

[tool.poetry.group.dev.dependencies]
bandit = { extras = ["toml"], version = "1.7.8" }
coverage = "7.5.0"
coverage-badge = "1.1.1"
freezegun = "1.4.0"
httpx = "0.27.0"
loguru-mypy = "0.0.4"
mypy = "1.9.0"
pytest = "8.1.1"
pytest-aioresponses = "0.2.0"
pytest-asyncio = "0.23.6"
pytest-cov = "5.0.0"
pytest-xdist = { extras = ["psutil"], version = "3.5.0" }
ruff = "0.4.1"
setuptools = "69.5.1"
types-aiofiles = "23.2.0.20240403"
types-croniter = "2.0.0.20240423"


[tool.black]
line-length = 100

[tool.autopep8]
max_line_length = 100
in-place = true
recursive = true
aggressive = 3
select = ["E203", "W503"]

[tool.isort]
profile = "black"
line_length = 100
wrap_length = 100
multi_line_output = 3
combine_as_imports = true
force_alphabetical_sort_within_sections = true
overwrite_in_place = true
skip_glob = []

[tool.mypy]
plugins = ["pydantic.mypy"]
python_version = "3.12"
strict = true
follow_imports = "silent"
warn_return_any = true
warn_redundant_casts = true
warn_unused_configs = true
warn_unused_ignores = true
check_untyped_defs = true
no_implicit_reexport = true
namespace_packages = true
fast_module_lookup = true
exclude = []

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true

[[tool.mypy.overrides]]
module = ["aiocache", "sqlalchemy_utils", "gunicorn.*"]
ignore_missing_imports = true

[tool.bandit]
skips = [
    "B311", # Standard pseudo-random generators are not suitable for security/cryptographic purposes
]

[tool.pytest.ini_options]
asyncio_mode = "auto"
addopts = "-n auto --dist worksteal --max-worker-restart 0"

# ------------------------------------------------------------------------------
# Uncomment me to run in sync mode
# addopts = "-s -vvv -o log_cli=true -o log_cli_level=DEBUG -n0"
# ------------------------------------------------------------------------------

pythonpath = ["."]
python_files = ["test_*.py"]

[tool.coverage.run]
source = ["app"]
parallel = true


[tool.coverage.report]
exclude_lines = [
    # Skip any pass lines such as may be used for @abstractmethod.
    "pass",

    # Don't complain if tests don't hit defensive assertion code.
    "raise NotImplementedError",
]
omit = ["app/models/*"]

[tool.ruff]
lint.ignore = [
    "D100",   # Missing docstring in public module
    "D101",   # Missing docstring in public class
    "D102",   # Missing docstring in public method
    "D103",   # Missing docstring in public function
    "D104",   # Missing docstring in public package
    "D105",   # Missing docstring in magic method
    "D107",   # Missing docstring in __init__
    "D203",   # 1 blank line required before class docstring
    "D205",   # 1 blank line required between summary line and description
    "D213",   # Multi-line docstring summary should start at the second line
    "ANN101", # Missing type annotation for self in method
    "ANN001", # Missing type annotation for function argument 'cls'
    "ANN102", # Missing type annotation for cls in classmethod
    "FIX001", # Line contains FIXME, consider resolving an issue
    "FIX002", # Line contains TODO, consider resolving an issue
    "TD001",  # Invalid TODO tag: `FIXME`
    "RUF029", # Function `func` is declared `async`, but doesn't `await` or use `async` features.
    "S311",   # Standard pseudo-random generators are not suitable for security/cryptographic purposes
]
target-version = "py312"
lint.task-tags = ["TODO", "FIXME", "NOTE"]
fix = true
show-fixes = true
preview = true
respect-gitignore = false
line-length = 120
lint.select = [
    "F",     # PyFlakes
    "I",     # isort
    "UP",    # PyUpgrade
    "YTT",   # flake8-2020
    "ASYNC", # flake8-async
    "TRIO",  # flake8-trio
    "B",     # bugbear
    "C4",    # flake8-comprehensions
    "T10",   # flake8-debugger
    "EXE",   # flake8-executable
    "INP",   # flake8-no-pep420
    "PIE",   # flake8-pie
    "PYI",   # flake8-pyi
    "PT",    # flake8-pytest
    "Q",     # flake8-quotes
    "RSE",   # flake8-raise
    "SLF",   # flake8-self
    "SIM",   # flake8-simplify
    "TID",   # flake8-tidy-imports
    "TCH",   # flake8-type-checking
    "INT",   # flake8-gettext
    "ERA",   # flake8-eradicate
    "PGH",   # pygrep-hooks
    "FLY",   # flynt
    "NPY",   # NumPy-specific rules
    "PERF",  # Perflint
    "FURB",  # Refurb
    "LOG",   # flake8-logging
    "RUF",   # Ruff-specific rules
    "S",     # flake8-bandit
    "T20",   # flake8-print
    "DTZ",   # flake8-datetimez
    "ARG",   # flake8-unused-arguments
    "PD",    # pandas-vet
    "C90",   # McCabe
    "ANN",   # flake8-annotations
    "FBT",   # flake8-boolean-trap
    "RET",   # flake8-return
    "PTH",   # flake8-use-pathlib
    "TD",    # flake8-todo
    "FIX",   # flake8-fixme
    "N",     # pep8-naming
    "D",     # flake8-docstrings
    "BLE",   # flake8-blind-except
    "A",     # builtins
    "SLOT",  # flake8-slot
    "PL",    # pylint

]
exclude = [".idea", "*migrations*"]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    # "D203",  # Missing docstring in public function
    "S101", # Use of assert detected
]


[tool.ruff.lint.isort]
order-by-type = false
